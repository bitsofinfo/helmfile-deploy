values:
  - statevalues/000-globals.yaml
  - statevalues/001-clusters.yaml
  - {{ requiredEnv "HELMFILE_DEPLOY_STATE_VALUES_DIR" }}/*
---
bases:
  - {{ requiredEnv "HELMFILE_DEPLOY_ENVIRONMENTS_DIR" }}/index.yaml
---
bases:
  - helmDefaults.yaml
---


releases:
  {{- /*
      ---------------------------------------------------------
      Basic values declarations
      ---------------------------------------------------------
  */ -}}
  {{- $envVals := .Environment.Values -}}
  {{- $classifier := (hasKey $envVals "classifier") | ternary ($envVals | getOrNil "classifier") "" -}}
  {{- $ports := (hasKey $envVals "ports") | ternary ($envVals | getOrNil "ports") (list (dict "port" 80 "tls" false)) }}
  {{- $namespace := .Namespace -}}
  {{- $stateVals := .Values }}

  {{- /*
      The target "cluster"
      Note: simpler syntax should just be: https://github.com/Masterminds/sprig/issues/151
  */ -}}
  {{- $targetCluster := (pick $stateVals.clusters $stateVals.targetCluster) | values | first }}


  {{- /*
      ---------------------------------------------------------
      For each [helmfile-environment].environments.[environment] loaded/found
      in yaml files under environments/[helmfile-environment]/* we loop over
      each environment's context one by one and generate a "appconduits"
      helmfile "release" for it.
      ---------------------------------------------------------
  */ -}}
  {{- range $currEnvironmentName,$currEnvironment := .Environment.Values.environments }}
  {{- range $currContextName,$currContext := $currEnvironment.contexts }}


  {{- /*
      Used by `tpl` variable parsing below. The caller can specify tpl parsed values i.e.
        "{{ .helmfile.[path] }}" If ".helmfile" is NOT present the "{{bracketed}}" will
      be left alone and assumed to be consumable by the chart in the release
  */ -}}
  {{- $helmfileVarsDict := dict "helmfile" (dict "clusters" $stateVals.clusters "targetCluster" $targetCluster "envVals" $envVals "stateVals" $stateVals "namespace" $namespace "context" $currContext "environment" $currEnvironment) }}


  {{- /*
      ---------------------------------------------------------
      "chartConfigs"
      ---------------------------------------------------------
      Here we grab the "chartConfigs" from the following possible locations in order of priority:

        1. The current "[helmfile-environment].environments.[environment].contexts.[context]" we are iterating over
            i.e. this would be declared in environments/[helmfile-environment]/[any-env-file.yaml]

        2. The current "[helmfile-environment].environments.[environment]" we are iterating over
            i.e. this would be declared in environments/[helmfile-environment]/[any-env-file.yaml]

        3. The top level helmfile-environment's "chartConfigs"
            i.e. this would be declared in environments/[helmfile-environment]/chartconfigs.yaml

        4. The targetCluster's "chartConfigs" (clusters.[targetCluster].chartConfigs)
            i.e. this would be declared in: statevalues/001-clusters.yaml or any other HELMFILE_DEPLOY_STATE_VALUES_DIR yaml

        5. The global state values "chartConfigs"
            i.e. this would be declared in: statevalues/000-globals.yaml or any other HELMFILE_DEPLOY_STATE_VALUES_DIR yaml

        6. Note with the sprig "merge" function: see oddities: https://github.com/Masterminds/sprig/issues/120

  */ -}}
  {{ $chartConfigs := dict }}
  {{ $chartConfigs := hasKey $stateVals "chartConfigs" | ternary (deepCopy ((hasKey $stateVals "chartConfigs") | ternary ($stateVals | getOrNil "chartConfigs") dict) | mergeOverwrite $chartConfigs) $chartConfigs }}
  {{ $chartConfigs := hasKey $targetCluster "chartConfigs" | ternary (deepCopy ((hasKey $targetCluster "chartConfigs") | ternary ($targetCluster | getOrNil "chartConfigs") dict) | mergeOverwrite $chartConfigs) $chartConfigs }}
  {{ $chartConfigs := hasKey $envVals "chartConfigs" | ternary (deepCopy ((hasKey $envVals "chartConfigs") | ternary ($envVals | getOrNil "chartConfigs") dict) | mergeOverwrite $chartConfigs) $chartConfigs }}
  {{ $chartConfigs := hasKey $currEnvironment "chartConfigs" | ternary (deepCopy ((hasKey $currEnvironment "chartConfigs") | ternary ($currEnvironment | getOrNil "chartConfigs") dict) | mergeOverwrite $chartConfigs) $chartConfigs }}
  {{ $chartConfigs := hasKey $currContext "chartConfigs" | ternary (deepCopy ((hasKey $currContext "chartConfigs") | ternary ($currContext | getOrNil "chartConfigs") dict) | mergeOverwrite $chartConfigs) $chartConfigs }}
  

  {{- /*
      ---------------------------------------------------------
      Generate a "conduitName" for each release

      [envVals.appname]-[currContextName][-[classifier]]
      ---------------------------------------------------------
  */ -}}
  {{- $conduitName := printf "%s-%s-%sREMOVEME-conduits" $envVals.appname $currContextName $classifier }}

  {{- /*
  this is annoying, due to lack of reliable ternary operators and nested IF garbage
   in golang conditionals and variable scope, we have no scratch like key-resolver...
   helm uses http://masterminds.github.io/sprig under the covers nicely.
  */ -}}
  {{- $conduitName := $conduitName | replace "-REMOVEME" "" }}
  {{- $conduitName := $conduitName | replace "REMOVEME" "" }}
  {{- $conduitName := $conduitName | replace "-%!s(<nil>)" "" }}



  {{- /*
      ---------------------------------------------------------
      Helmfile RELEASE generation:

      Generate an actual helmfile release of the "appconduits" chart
      for the currentEnvironment.currentContext
      with its desired state expressed in helm values
      ---------------------------------------------------------
  */ -}}
  - name: {{ $conduitName }}
    labels:
      app: {{ $envVals.appname }}
      context: {{ $currContextName }}
    namespace: {{ $namespace }}
    chart: {{ $chartConfigs.appconduits.chart }}
    {{ if hasKey $chartConfigs.appconduits "version" }}
    version: {{ $chartConfigs.appconduits.version }}
    {{ end }}

    {{- /* Permit forced override of the default helm tillerNamespace (defined in helmDefaults.yaml) 
          (set this via helmfile --state-values-set forceHelmTillerNamespace=[namespace]) */ -}}
    {{ if hasKey $stateVals "forceHelmTillerNamespace" }}
    tillerNamespace: {{ $stateVals.forceHelmTillerNamespace }}
    {{ end }}

    {{- /* Permit forced override of the default helm timeout (defined in helmDefaults.yaml) 
          (set this via helmfile --state-values-set forceHelmTimeout=[N seconds]) */ -}}
    {{ if hasKey $stateVals "forceHelmTimeout" }}
    timeout: {{ $stateVals.forceHelmTimeout }}
    {{ end }}
    
    values:

      {{- /*
          ---------------------------------------------------------
          BASE values file references
          @see statevalues/000-globals.yaml for more info
          note: "exec" hack can go away when
          https://github.com/roboll/helmfile/issues/766 is addressed
          ---------------------------------------------------------
      */ -}}
      {{ $valueBaseParseVars := dict "appname" $envVals.appname "classifier" ($envVals | getOrNil "classifier") "environmentName" $currEnvironmentName "contextName" $currContextName }}

      {{- /* Get list of all named "sets" we actually want to use */ -}}
      {{ range $baseValueSetName := $chartConfigs.appconduits.chartValues.baseValueSets }}

        {{- /* Load the actual referenced set by name from 'availableBaseValueSets' */ -}}
        {{ $baseValues := (pick $chartConfigs.appconduits.chartValues.availableBaseValueSets $baseValueSetName) | values | first }}

        {{- /* For each one, lets add it to the list of overall values files we will reference below */ -}}
        {{ range $valueBase := $baseValues }}
          {{ $valueFile := printf "%s/values/%s/values.yaml" $chartConfigs.appconduits.chartValues.baseValuesRootDir (tpl $valueBase $valueBaseParseVars) }}
          {{ if eq (exec "./fileexists.sh" (list $valueFile)) "true" }}
      - {{ $valueFile }}
          {{ end }}
        {{ end }}
      {{ end }}


      {{/*
          ---------------------------------------------------------
          Inline custom values

          These values, combined with the "bases" above yield
          the overall set of "values" customizations passed to helm
          ---------------------------------------------------------
      */ -}}
      - conduitname: "{{ $envVals.appname }}"
        classifier: "{{ $classifier }}"

        {{ if hasKey $chartConfigs.appconduits.chartValues "values" }}


        {{ if hasKey $chartConfigs.appconduits.chartValues.values "ingress" }}
        ingress:
          {{ if hasKey $chartConfigs.appconduits.chartValues.values.ingress "dns" }}
          dns:
            {{ toYaml $chartConfigs.appconduits.chartValues.values.ingress.dns | indent 0 }}
          {{ end }}
          {{ if hasKey $chartConfigs.appconduits.chartValues.values.ingress "tls" }}
          tls:
            {{ toYaml $chartConfigs.appconduits.chartValues.values.ingress.tls | indent 0 }}
          {{ end }}
          {{ if hasKey $chartConfigs.appconduits.chartValues.values.ingress "metadata" }}
          metadata:
            {{ if hasKey $chartConfigs.appconduits.chartValues.values.ingress.metadata "labels" }}
            labels:
              {{ range $labelName,$labelValue := $chartConfigs.appconduits.chartValues.values.ingress.metadata.labels }}
              "{{$labelName}}": "{{ contains ".helmfile" $labelValue | ternary (tpl $labelValue $helmfileVarsDict) $labelValue }}"
              {{ end }}
            {{ end }}
            {{ if hasKey $chartConfigs.appconduits.chartValues.values.ingress.metadata "annotations" }}
            annotations:
              {{ range $annotationName,$annotationValue := $chartConfigs.appconduits.chartValues.values.ingress.metadata.annotations }}
              "{{$annotationName}}": "{{ contains ".helmfile" $annotationValue | ternary (tpl $annotationValue $helmfileVarsDict) $annotationValue }}"
              {{ end }}
            {{ end }}
          {{ end }}
        {{ end }}


        {{ end }}


        conduits:
          contexts:
            {{ $currContextName }}:
              services:
                {{- range $service := $currContext.services }}
                  {{- range $port := $ports }}
                    {{- $serviceName := printf "REMOVEME%s-%s-%d" $classifier $service.name $port.port }}
                    {{- $serviceName := $serviceName | replace "REMOVEME-" "" }}
                    {{- $serviceName := $serviceName | replace "REMOVEME" "" }}
                    {{- $serviceName := $serviceName | replace "%!s(<nil>)-" "" }}
                {{ $serviceName }}:
                  port: {{ $port.port }}
                  targetPort: {{ $port.port }}
                  tls: {{ $port.tls }}
                  selector:
                    "{{$stateVals.releaseConfigs.conduits.selectorlabelNames.appName}}": "{{ $envVals.appname }}"
                    "{{$stateVals.releaseConfigs.conduits.selectorlabelNames.appVersion}}": "{{ $service.version }}"
                    {{ if $classifier }}
                    "{{$stateVals.releaseConfigs.conduits.selectorlabelNames.appClassifier}}": {{ $classifier }}
                    {{ end }}
                  {{ end }}
                {{ end }}

              ingress:

                {{/*
                  For each "targetedPort" we generate a unique "appconduits"
                  "ingressname-[classifier]-[targetedport]" that contains
                  the appconduits ingress mappings array

                  By default the targetedPorts is the FIRST known port
                  that is listed in the top level "$ports" list

                */ -}}
                {{- $targetedPorts := dict "ports" (list (first $ports)) -}}

                {{ range $ingressName, $ingress := $currContext.ingress }}

                  {{/*
                    Does the current ingress stanza declare its own "targetedPorts"?
                    If so we will utilize that...
                   */ -}}
                  {{ if hasKey $ingress "targetedPorts" }}
                    {{ $_ := set $targetedPorts "ports" list }}
                    {{ range $p := $ports }}
                      {{ if has $p.port $ingress.targetedPorts }}
                        {{ $_ := set $targetedPorts "ports" (append $targetedPorts.ports $p) }}
                      {{ end  }}
                    {{ end }}
                  {{ end }}

                  {{/*
                    Now for each port we will generate a unique appconduits "ingress" declaration
                  */ -}}
                  {{- range $port := $targetedPorts.ports }}
                    {{ $ingressName := printf "%s-%sREMOVEME-%d" $ingressName $classifier $port.port }}
                    {{- $ingressName := $ingressName | replace "-REMOVEME" "" }}
                    {{- $ingressName := $ingressName | replace "REMOVEME" "" }}
                    {{- $ingressName := $ingressName | replace "-%!s(<nil>)" "" }}

                {{ $ingressName }}:
                  mappings:
                    {{ range $mapping := $ingress.mappings }}
                    - name: {{ $mapping.name }}
                      {{ if hasKey $mapping "annotations" }}
                      annotations:
                        {{ range $annotation,$val := $mapping.annotations }}
                        {{ $annotation }}: {{ $val }}
                        {{ end }}
                      {{ end }}
                      labels:
                      {{ range $label, $value := $mapping.labels }}
                        {{ $label }}: "{{ $value }}"
                      {{ end }}
                      hosts:
                        {{ range $host := $mapping.hosts }}
                          {{- $hostName := $host.name | replace "[[#port]]" ($port.port | toString) -}}
                          {{- $hostName := $hostName | replace "-." "." -}}
                        - name: "{{ $hostName }}"
                          {{ if hasKey $host "annotations" }}
                          annotations:
                          {{ range $annotation,$val := $host.annotations }}
                            {{ $annotation }}: {{ $val }}
                          {{ end }}
                          {{ end }}
                          {{ if hasKey $host "labels" }}
                          labels:
                          {{ range $label,$val := $host.labels }}
                            {{ $label }}: {{ $val }}
                          {{ end }}
                          {{ end }}
                          dns: {{ (eq ((getOrNil "dns" $host) | toString) "false") | ternary false true }}
                          {{ if hasKey $host "tls" }}
                          tls:
                            enabled: {{ (eq ((getOrNil "enabled" $host.tls) | toString) "true") | ternary true false }}
                            {{ if hasKey $host.tls "secretName" }}
                            secretName: {{ getOrNil "secretName" $host.tls }}
                            {{ end }}
                          {{ end }}
                        {{ end }}
                      {{ if hasKey $mapping "paths" }}
                      paths:
                        {{ range $path := $mapping.paths }}
                        - "{{ $path }}"
                        {{ end }}
                      {{ end }}
                      serviceBindings:
                        {{ range $serviceName,$percentage := $mapping.serviceBindings }}
                          {{- $serviceName := printf "REMOVEME%s-%s-%d" $classifier $serviceName $port.port }}
                          {{- $serviceName := $serviceName | replace "REMOVEME-" "" }}
                          {{- $serviceName := $serviceName | replace "REMOVEME" "" }}
                          {{- $serviceName := $serviceName | replace "%!s(<nil>)-" "" }}
                        {{ $serviceName }}: "{{ $percentage }}"
                        {{ end }}
                      {{ end }}
                    {{ end }}
                {{ end }}

  {{ end }}
  {{ end }}
